<?xml version="1.0"?>
<ruleset name="Rmx351CodingStandard"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../vendor/squizlabs/php_codesniffer/phpcs.xsd">
    <description>Rmx351 coding standard.</description>

    <!-- Force rules for function phpDoc -->
    <rule ref="PEAR.Commenting.FunctionComment">
        <!-- Allow `@throws` without description -->
        <exclude name="PEAR.Commenting.FunctionComment.EmptyThrows" />
        <!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="PEAR.Commenting.FunctionComment.IncorrectParamVarName" />
        <!-- Does not support collections, i.e. `string[]` -->
        <exclude name="PEAR.Commenting.FunctionComment.IncorrectTypeHint" />
        <!-- Forces incorrect types -->
        <exclude name="PEAR.Commenting.FunctionComment.InvalidReturn" />
        <!-- Breaks with compound return types, i.e. `string|null` -->
        <exclude name="PEAR.Commenting.FunctionComment.InvalidReturnNotVoid" />
        <!-- Breaks when all params are not documented -->
        <exclude name="PEAR.Commenting.FunctionComment.InvalidTypeHint" />
        <!-- Doc comment is not required for every method -->
        <exclude name="PEAR.Commenting.FunctionComment.Missing" />
        <!-- Do not require comments for `@param` -->
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment" />
        <!-- Do not require `@param` for all parameters -->
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamTag" />
        <!-- Do not require `@return` for void methods -->
        <exclude name="PEAR.Commenting.FunctionComment.MissingReturn" />
        <!-- Comments don't have to be sentences -->
        <exclude name="PEAR.Commenting.FunctionComment.ParamCommentFullStop" />
        <!-- Comments don't have to be sentences -->
        <exclude name="PEAR.Commenting.FunctionComment.ParamCommentNotCapital" />
        <!-- Breaks when all params are not documented -->
        <exclude name="PEAR.Commenting.FunctionComment.ParamNameNoMatch" />
        <!-- Doesn't respect inheritance -->
        <exclude name="PEAR.Commenting.FunctionComment.ScalarTypeHintMissing" />
        <!-- Throws comments can start without a capital and doesn't need a full stop -->
        <exclude name="PEAR.Commenting.FunctionComment.ThrowsNoFullStop" />
        <exclude name="PEAR.Commenting.FunctionComment.ThrowsNotCapital" />
        <!-- Doesn't work with self as typehint -->
        <exclude name="PEAR.Commenting.FunctionComment.TypeHintMissing" />
    </rule>

    <!-- Forbid comments starting with # -->
    <rule ref="PEAR.Commenting.InlineComment" />

    <rule ref="PSR2"/>

    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="alignAtEnd" value="false" />
        </properties>
    </rule>

    <!-- Disallow else if in favor of elseif -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>
    <!-- Disallow space after nullable operator -->
    <rule ref="PSR12.Functions.NullableTypeDeclaration" />

    <!-- Force array element indentation with 4 spaces -->
    <rule ref="Generic.Arrays.ArrayIndent" />
    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />
    <!-- Detects for-loops that can be simplified to a while-loop -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
    <!-- Detects unconditional if- and elseif-statements -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
    <!-- Disallow spaces before/after incrementation/decrementation operators -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing" />
    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName" />
    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch" />
    </rule>
    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <!-- Forbid useless empty method overrides -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />
    <!-- Forbid inline HTML in PHP code -->
    <rule ref="Generic.Files.InlineHTML" />
    <!-- Force Unix LF (linefeed) line ending -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n" />
        </properties>
    </rule>
    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast" />
    <!-- Forbid whitespace after `!` -->
    <rule ref="Generic.Formatting.SpaceAfterNot">
        <properties>
            <property name="spacing" value="0" />
        </properties>
    </rule>
    <!-- Forbid PHP 4 constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName" />
    <!-- Forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator" />
    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag" />
    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <!-- Forbid short open tag -->
    <rule ref="Generic.PHP.DisallowShortOpenTag">
        <!-- But allow short echo tags -->
        <exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound" />
    </rule>
    <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="chop" value="rtrim" />
                <element key="close" value="closedir" />
                <element key="compact" value="null" />
                <element key="delete" value="unset" />
                <element key="doubleval" value="floatval" />
                <element key="extract" value="null" />
                <element key="fputs" value="fwrite" />
                <element key="ini_alter" value="ini_set" />
                <element key="is_double" value="is_float" />
                <element key="is_integer" value="is_int" />
                <element key="is_long" value="is_int" />
                <element key="is_null" value="null" />
                <element key="is_real" value="is_float" />
                <element key="is_writeable" value="is_writable" />
                <element key="join" value="implode" />
                <element key="key_exists" value="array_key_exists" />
                <element key="pos" value="current" />
                <element key="settype" value="null" />
                <element key="show_source" value="highlight_file" />
                <element key="sizeof" value="count" />
                <element key="strchr" value="strstr" />
            </property>
        </properties>
    </rule>
    <!-- Forbid goto instruction -->
    <rule ref="Generic.PHP.DiscourageGoto" />
    <!-- Force PHP 7 param and return types to be lowercased -->
    <rule ref="Generic.PHP.LowerCaseType" />
    <!-- Forbid `php_sapi_name()` function, use PHP_SAPI -->
    <rule ref="Generic.PHP.SAPIUsage" />
    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true" />
        </properties>
    </rule>

    <!-- Add trailing commas to all array elements -->
    <rule ref="WebimpressCodingStandard.Arrays.TrailingArrayComma" />
    <!-- Forbid blank line after opening braces and before closing braces -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.BraceBlankLine" />
    <!-- Forbid FQN for classes/traits/interfaces/constants/functions -->
    <rule ref="WebimpressCodingStandard.PHP.DisallowFqn" />
    <!-- Format anonymous class declaration -->
    <rule ref="WebimpressCodingStandard.Classes.AnonymousClassDeclaration" />
    <!-- Forbid null values for class properties -->
    <rule ref="WebimpressCodingStandard.Classes.NoNullValues" />
    <!-- Comments at the end of the line, with at least single space -->
    <rule ref="WebimpressCodingStandard.Commenting.Placement" />
    <!-- Requires one space after namespace keyword -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.Namespace" />
    <!-- Forbid spaces around namespace separator -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.NamespaceSeparator" />
    <!-- One space after break/continue with argument, remove redundant 1 -->
    <rule ref="WebimpressCodingStandard.ControlStructures.BreakAndContinue" />
    <!-- Forbid continue in switch; use break instead -->
    <rule ref="WebimpressCodingStandard.ControlStructures.ContinueInSwitch" />
    <!-- Forbid boolean operator at the end of the line -->
    <rule ref="WebimpressCodingStandard.Operators.BooleanOperator" />
    <!-- Formatting of ternary operator - content must be after ?/:, not in new line -->
    <rule ref="WebimpressCodingStandard.Operators.TernaryOperator" />
    <!-- Exception must have *Exception suffix -->
    <rule ref="WebimpressCodingStandard.NamingConventions.Exception" />
    <!-- Trait must have *Traif suffix -->
    <rule ref="WebimpressCodingStandard.NamingConventions.Trait" />
    <!-- Require camelCase variable names -->
    <rule ref="WebimpressCodingStandard.NamingConventions.ValidVariableName" />
    <!-- Use the correct class name, i.e. DateTime not Datetime, etc -->
    <rule ref="WebimpressCodingStandard.PHP.CorrectClassNameCase" />
    <!-- Only one blank line allowed -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.BlankLine" />
    <!-- Indents formatting -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.ScopeIndent" />
    <!-- Forbid inline comments after closing curly bracket, like // end if etc -->
    <rule ref="WebimpressCodingStandard.Commenting.NoInlineCommentAfterCurlyClose" />
    <!-- Use correct case of default PHPDocs and PHPUnit tags @var not @VAR etc -->
    <rule ref="WebimpressCodingStandard.Commenting.TagCase" />
    <!-- Heredoc/nowdoc tag uppercase without spaces -->
    <rule ref="WebimpressCodingStandard.Formatting.Heredoc" />
    <!-- Forbid space after splat operator -->
    <rule ref="WebimpressCodingStandard.Formatting.NoSpaceAfterSplat" />
    <!-- Forbid reference operator before new, and formatting of the reference operator -->
    <rule ref="WebimpressCodingStandard.Formatting.Reference" />
    <!-- Use ::class instead of class string reference -->
    <rule ref="WebimpressCodingStandard.Formatting.StringClassReference" />
    <!-- Single line between methods in class -->
    <rule ref="WebimpressCodingStandard.Methods.LineAfter" />
    <!-- Forbid space before comma, require single space after comma -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.CommaSpacing" />
    <!-- Forbid concatenation character at the end of the line -->
    <rule ref="WebimpressCodingStandard.Strings.NoConcatenationAtTheEnd" />
    <!-- Sort traits alphabetically -->
    <rule ref="WebimpressCodingStandard.Classes.AlphabeticallySortedTraits" />
    <!-- Forbid multiple traits by declaration -->
    <rule ref="WebimpressCodingStandard.Classes.TraitUsage" />
    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="WebimpressCodingStandard.Namespaces.AlphabeticallySortedUses" />
    <!-- Require lowercase function and const keywords in imports with one space after -->
    <rule ref="WebimpressCodingStandard.Namespaces.ConstAndFunctionKeywords" />
    <!-- Forbid unused use statements -->
    <rule ref="WebimpressCodingStandard.Namespaces.UnusedUseStatement" />
    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="WebimpressCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
    <!-- Forbid useless alias for classes, constants, functions and traits functions -->
    <rule ref="WebimpressCodingStandard.Namespaces.RedundantAlias" />
    <!-- Forbid useless parentheses -->
    <rule ref="WebimpressCodingStandard.Formatting.RedundantParentheses" />
    <!-- Forbid redundant semicolons -->
    <rule ref="WebimpressCodingStandard.PHP.RedundantSemicolon" />
    <!-- Require space around colon in return types -->
    <rule ref="WebimpressCodingStandard.Formatting.ReturnType">
        <!-- Covered by Generic.PHP.LowerCaseType -->
        <exclude name="WebimpressCodingStandard.Formatting.ReturnType.LowerCaseSimpleType" />
    </rule>
    <!-- Forbid whitespace around double colon operator -->
    <rule ref="WebimpressCodingStandard.Formatting.DoubleColon" />

    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" value="true" />
        </properties>
    </rule>
    <!-- Require usage of ::class instead of __CLASS__, get_class(), get_class($this), get_called_class() and get_parent_class() -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference" />
    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@api" />
                <element value="@author" />
                <element value="@category" />
                <element value="@copyright" />
                <element value="@created" />
                <element value="@license" />
                <element value="@package" />
                <element value="@since" />
                <element value="@subpackage" />
                <element value="@version" />
                <element value="@expectedException" />
                <element value="@expectedExceptionCode" />
                <element value="@expectedExceptionMessage" />
                <element value="@expectedExceptionMessageRegExp" />
            </property>
        </properties>
    </rule>
    <!-- Forbid empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />
    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i" />
                <element value="~^Created by \S+\.\z~i" />
                <element value="~^(User|Date|Time): \S+\z~i" />
                <element value="~^\S+ [gs]etter\.\z~i" />
                <element value="~^Class \S+\z~i" />
            </property>
        </properties>
    </rule>
    <!-- report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration" />
    <!-- Require comments with single line @var written as one-liners -->
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment" />
    <!-- Forbid weak comparisons -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators" />
    <!-- Require language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />
    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />
    <!-- Forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />
    <!-- Require using Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />
    <!-- Forbid unused variables passed to closures via `use` -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
    <!-- Forbid useless variables -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />
    <!-- Forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />
    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine" />
    <!-- Require newlines around namespace declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing" />
    <!-- Require the usage of assignment operators, eg `+=`, `.=` when possible -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator" />
    <!-- Forbid `list(...)` syntax, use [...] instead -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList" />
    <!-- Forbid use of longhand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast" />
    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />
    <!-- Forbid fancy yoda conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />
    <!-- Require new instances with parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
    <!-- Forbid usage of conditions when a simple return can be used -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />
    <!-- Forbid usage of boolean-only ternary operator usage (e.g. $foo ? true : false) -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />
    <!-- Require closures not referencing $this be static -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure" />
    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true" />
        </properties>
    </rule>
    <!-- Forbid useless uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
    <!-- Forbid useless alias for classes, constants and functions -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />
    <!-- Require no spacing after spread operator -->
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing" />
    <!-- forbid argument unpacking for functions specialized by PHP VM -->
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking" />
    <!-- Forbid useless parentheses -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />
    <!-- Forbid useless semicolon `;` -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />
    <!-- Require the `null` type hint to be in the last position of annotations -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
    <!-- Require space around colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="1" />
        </properties>
    </rule>
    <!-- Forbid useless @var for constants -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint" />
    <!-- Forbid duplicated variables assignments -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />

    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName" />
    <!-- Force `self::` for self-reference, force lower-case self, forbid spaces around `::` -->
    <rule ref="Squiz.Classes.SelfMemberReference" />
    <!-- Force phpDoc alignment -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- Allow extra spaces after star, i.e. for indented annotations -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar" />
    </rule>
    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators" />
    <!-- Forbid `global` -->
    <rule ref="Squiz.PHP.GlobalKeyword" />
    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions" />
    <!-- Forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode" />
    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage" />
    <!-- Force whitespace before and after concatenation -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <!-- Forbid braces around string in `echo` -->
    <rule ref="Squiz.Strings.EchoedStrings" />
    <!-- Forbid spaces in type casts -->
    <rule ref="Squiz.WhiteSpace.CastSpacing" />
    <!-- Require space after language constructs -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
    <!-- Require space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <!-- Forbid multiple spaces before and after operators -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <!-- Forbid spaces before semicolon `;` -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" value="false" />
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR2 -> turning back on -->
        <severity>5</severity>
    </rule>

    <!-- Forbid spaces around square brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />
    <!-- Force array declaration structure -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- Disable arrow alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" />
        <!-- Uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" />
        <!-- Allow multiple values on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />
        <!-- Disable alignment of braces -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" />
        <!-- Disable alignment of values with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
        <!-- Checked by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoComma" />
    </rule>
    <!-- Forbid global functions -->
    <rule ref="Squiz.Functions.GlobalFunction" />
    <!-- Forbid functions inside functions -->
    <rule ref="Squiz.PHP.InnerFunctions" />
    <!-- Forbid blank line after function opening brace -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />
    <!-- Require 1 line before and after function, except at the top and bottom -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="spacingBeforeFirst" value="0" />
            <property name="spacingAfterLast" value="0" />
        </properties>
    </rule>

    <!-- Lines can be N chars long (warnings), errors at M chars -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="160" />
            <property name="absoluteLineLimit" value="0" />
        </properties>
    </rule>
</ruleset>